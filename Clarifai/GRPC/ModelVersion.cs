// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/clarifai/api/model_version.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Clarifai.Internal.GRPC {

  /// <summary>Holder for reflection information generated from proto/clarifai/api/model_version.proto</summary>
  public static partial class ModelVersionReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/clarifai/api/model_version.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelVersionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZwcm90by9jbGFyaWZhaS9hcGkvbW9kZWxfdmVyc2lvbi5wcm90bxIMY2xh",
            "cmlmYWkuYXBpGh9wcm90by9jbGFyaWZhaS9hcGkvY29tbW9uLnByb3RvGiBw",
            "cm90by9jbGFyaWZhaS9hcGkvY29uY2VwdC5wcm90bxomcHJvdG8vY2xhcmlm",
            "YWkvYXBpL3N0YXR1cy9zdGF0dXMucHJvdG8aKXByb3RvL2NsYXJpZmFpL2Fw",
            "aS91dGlscy9leHRlbnNpb25zLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvItwBCgxNb2RlbFZlcnNpb24SCgoCaWQYASABKAkSLgoK",
            "Y3JlYXRlZF9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAS",
            "KwoGc3RhdHVzGAMgASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMS",
            "HAoUYWN0aXZlX2NvbmNlcHRfY291bnQYBCABKA0SKgoHbWV0cmljcxgFIAEo",
            "CzIZLmNsYXJpZmFpLmFwaS5FdmFsTWV0cmljcxIZChF0b3RhbF9pbnB1dF9j",
            "b3VudBgGIAEoDSIxChVQcmV0cmFpbmVkTW9kZWxDb25maWcSCgoCaWQYASAB",
            "KAkSDAoEdHlwZRgCIAEoCSJvChZHZXRNb2RlbFZlcnNpb25SZXF1ZXN0Ei8K",
            "C3VzZXJfYXBwX2lkGAEgASgLMhouY2xhcmlmYWkuYXBpLlVzZXJBcHBJRFNl",
            "dBIQCghtb2RlbF9pZBgCIAEoCRISCgp2ZXJzaW9uX2lkGAMgASgJIpIBChhM",
            "aXN0TW9kZWxWZXJzaW9uc1JlcXVlc3QSLwoLdXNlcl9hcHBfaWQYASABKAsy",
            "Gi5jbGFyaWZhaS5hcGkuVXNlckFwcElEU2V0EhAKCG1vZGVsX2lkGAIgASgJ",
            "EgwKBHBhZ2UYAyABKA0SEAoIcGVyX3BhZ2UYBCABKA0SEwoLY29uY2VwdF9p",
            "ZHMYBSADKAkikQEKGFBvc3RNb2RlbFZlcnNpb25zUmVxdWVzdBIvCgt1c2Vy",
            "X2FwcF9pZBgBIAEoCzIaLmNsYXJpZmFpLmFwaS5Vc2VyQXBwSURTZXQSEAoI",
            "bW9kZWxfaWQYAiABKAkSMgoObW9kZWxfdmVyc2lvbnMYAyADKAsyGi5jbGFy",
            "aWZhaS5hcGkuTW9kZWxWZXJzaW9uInIKGURlbGV0ZU1vZGVsVmVyc2lvblJl",
            "cXVlc3QSLwoLdXNlcl9hcHBfaWQYASABKAsyGi5jbGFyaWZhaS5hcGkuVXNl",
            "ckFwcElEU2V0EhAKCG1vZGVsX2lkGAMgASgJEhIKCnZlcnNpb25faWQYBCAB",
            "KAkifAoaU2luZ2xlTW9kZWxWZXJzaW9uUmVzcG9uc2USKwoGc3RhdHVzGAEg",
            "ASgLMhsuY2xhcmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMSMQoNbW9kZWxfdmVy",
            "c2lvbhgCIAEoCzIaLmNsYXJpZmFpLmFwaS5Nb2RlbFZlcnNpb24iggEKGU11",
            "bHRpTW9kZWxWZXJzaW9uUmVzcG9uc2USKwoGc3RhdHVzGAEgASgLMhsuY2xh",
            "cmlmYWkuYXBpLnN0YXR1cy5TdGF0dXMSOAoObW9kZWxfdmVyc2lvbnMYAiAD",
            "KAsyGi5jbGFyaWZhaS5hcGkuTW9kZWxWZXJzaW9uQgSAtRgBIjEKCkxhYmVs",
            "Q291bnQSFAoMY29uY2VwdF9uYW1lGAEgASgJEg0KBWNvdW50GAIgASgNIkwK",
            "EUxhYmVsRGlzdHJpYnV0aW9uEjcKFXBvc2l0aXZlX2xhYmVsX2NvdW50cxgB",
            "IAMoCzIYLmNsYXJpZmFpLmFwaS5MYWJlbENvdW50IkIKF0Nvb2NjdXJyZW5j",
            "ZU1hdHJpeEVudHJ5EgsKA3JvdxgBIAEoCRILCgNjb2wYAiABKAkSDQoFY291",
            "bnQYAyABKA0iYAoSQ29vY2N1cnJlbmNlTWF0cml4EjUKBm1hdHJpeBgBIAMo",
            "CzIlLmNsYXJpZmFpLmFwaS5Db29jY3VycmVuY2VNYXRyaXhFbnRyeRITCgtj",
            "b25jZXB0X2lkcxgCIAMoCSJOChRDb25mdXNpb25NYXRyaXhFbnRyeRIRCglw",
            "cmVkaWN0ZWQYASABKAkSDgoGYWN0dWFsGAIgASgJEhMKBXZhbHVlGAQgASgC",
            "QgSAtRgBIloKD0NvbmZ1c2lvbk1hdHJpeBIyCgZtYXRyaXgYASADKAsyIi5j",
            "bGFyaWZhaS5hcGkuQ29uZnVzaW9uTWF0cml4RW50cnkSEwoLY29uY2VwdF9p",
            "ZHMYAiADKAkiRQoDUk9DEhEKA2ZwchgBIAMoAkIEgLUYARIRCgN0cHIYAiAD",
            "KAJCBIC1GAESGAoKdGhyZXNob2xkcxgDIAMoAkIEgLUYASJfChRQcmVjaXNp",
            "b25SZWNhbGxDdXJ2ZRIUCgZyZWNhbGwYASADKAJCBIC1GAESFwoJcHJlY2lz",
            "aW9uGAIgAygCQgSAtRgBEhgKCnRocmVzaG9sZHMYAyADKAJCBIC1GAEijwIK",
            "DUJpbmFyeU1ldHJpY3MSFQoHbnVtX3BvcxgBIAEoDUIEgLUYARIVCgdudW1f",
            "bmVnGAIgASgNQgSAtRgBEhUKB251bV90b3QYAyABKA1CBIC1GAESFQoHcm9j",
            "X2F1YxgEIAEoAkIEgLUYARIQCgJmMRgFIAEoAkIEgLUYARImCgdjb25jZXB0",
            "GAYgASgLMhUuY2xhcmlmYWkuYXBpLkNvbmNlcHQSJAoJcm9jX2N1cnZlGAcg",
            "ASgLMhEuY2xhcmlmYWkuYXBpLlJPQxJCChZwcmVjaXNpb25fcmVjYWxsX2N1",
            "cnZlGAggASgLMiIuY2xhcmlmYWkuYXBpLlByZWNpc2lvblJlY2FsbEN1cnZl",
            "IpQBChBFdmFsVGVzdFNldEVudHJ5EgoKAmlkGAEgASgJEgsKA3VybBgCIAEo",
            "CRIxChJwcmVkaWN0ZWRfY29uY2VwdHMYAyADKAsyFS5jbGFyaWZhaS5hcGku",
            "Q29uY2VwdBI0ChVncm91bmRfdHJ1dGhfY29uY2VwdHMYBCADKAsyFS5jbGFy",
            "aWZhaS5hcGkuQ29uY2VwdCKPAgoOTWV0cmljc1N1bW1hcnkSGQoNdG9wMV9h",
            "Y2N1cmFjeRgBIAEoAkICGAESGQoNdG9wNV9hY2N1cmFjeRgCIAEoAkICGAES",
            "HwoRbWFjcm9fYXZnX3JvY19hdWMYAyABKAJCBIC1GAESHwoRbWFjcm9fc3Rk",
            "X3JvY19hdWMYBCABKAJCBIC1GAESIAoSbWFjcm9fYXZnX2YxX3Njb3JlGAUg",
            "ASgCQgSAtRgBEiAKEm1hY3JvX3N0ZF9mMV9zY29yZRgGIAEoAkIEgLUYARIh",
            "ChNtYWNyb19hdmdfcHJlY2lzaW9uGAcgASgCQgSAtRgBEh4KEG1hY3JvX2F2",
            "Z19yZWNhbGwYCCABKAJCBIC1GAEi/wIKC0V2YWxNZXRyaWNzEisKBnN0YXR1",
            "cxgBIAEoCzIbLmNsYXJpZmFpLmFwaS5zdGF0dXMuU3RhdHVzEi0KB3N1bW1h",
            "cnkYAiABKAsyHC5jbGFyaWZhaS5hcGkuTWV0cmljc1N1bW1hcnkSNwoQY29u",
            "ZnVzaW9uX21hdHJpeBgDIAEoCzIdLmNsYXJpZmFpLmFwaS5Db25mdXNpb25N",
            "YXRyaXgSPQoTY29vY2N1cnJlbmNlX21hdHJpeBgEIAEoCzIgLmNsYXJpZmFp",
            "LmFwaS5Db29jY3VycmVuY2VNYXRyaXgSNQoMbGFiZWxfY291bnRzGAUgASgL",
            "Mh8uY2xhcmlmYWkuYXBpLkxhYmVsRGlzdHJpYnV0aW9uEjMKDmJpbmFyeV9t",
            "ZXRyaWNzGAYgAygLMhsuY2xhcmlmYWkuYXBpLkJpbmFyeU1ldHJpY3MSMAoI",
            "dGVzdF9zZXQYByADKAsyHi5jbGFyaWZhaS5hcGkuRXZhbFRlc3RTZXRFbnRy",
            "eSLGAgodR2V0TW9kZWxWZXJzaW9uTWV0cmljc1JlcXVlc3QSLwoLdXNlcl9h",
            "cHBfaWQYASABKAsyGi5jbGFyaWZhaS5hcGkuVXNlckFwcElEU2V0EhAKCG1v",
            "ZGVsX2lkGAIgASgJEhIKCnZlcnNpb25faWQYAyABKAkSRwoGZmllbGRzGAQg",
            "ASgLMjcuY2xhcmlmYWkuYXBpLkdldE1vZGVsVmVyc2lvbk1ldHJpY3NSZXF1",
            "ZXN0LkZpZWxkc1ZhbHVlGoQBCgtGaWVsZHNWYWx1ZRIYChBjb25mdXNpb25f",
            "bWF0cml4GAEgASgIEhsKE2Nvb2NjdXJyZW5jZV9tYXRyaXgYAiABKAgSFAoM",
            "bGFiZWxfY291bnRzGAMgASgIEhYKDmJpbmFyeV9tZXRyaWNzGAQgASgIEhAK",
            "CHRlc3Rfc2V0GAUgASgIIo0BCh5Qb3N0TW9kZWxWZXJzaW9uTWV0cmljc1Jl",
            "cXVlc3QSLwoLdXNlcl9hcHBfaWQYASABKAsyGi5jbGFyaWZhaS5hcGkuVXNl",
            "ckFwcElEU2V0EhAKCG1vZGVsX2lkGAIgASgJEhIKCnZlcnNpb25faWQYAyAB",
            "KAkSFAoMbWF4X2V4YW1wbGVzGAQgASgNQloKG2NsYXJpZmFpMi5pbnRlcm5h",
            "bC5ncnBjLmFwaVoDYXBpogIEQ0FJUKoCFkNsYXJpZmFpLkludGVybmFsLkdS",
            "UEPCAgFfygIRQ2xhcmlmYWlcSW50ZXJuYWxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Clarifai.Internal.GRPC.CommonReflection.Descriptor, global::Clarifai.Internal.GRPC.ConceptReflection.Descriptor, global::Clarifai.Internal.GRPC.Status.StatusReflection.Descriptor, global::Clarifai.Internal.GRPC.Utils.ExtensionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.ModelVersion), global::Clarifai.Internal.GRPC.ModelVersion.Parser, new[]{ "Id", "CreatedAt", "Status", "ActiveConceptCount", "Metrics", "TotalInputCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.PretrainedModelConfig), global::Clarifai.Internal.GRPC.PretrainedModelConfig.Parser, new[]{ "Id", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.GetModelVersionRequest), global::Clarifai.Internal.GRPC.GetModelVersionRequest.Parser, new[]{ "UserAppId", "ModelId", "VersionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.ListModelVersionsRequest), global::Clarifai.Internal.GRPC.ListModelVersionsRequest.Parser, new[]{ "UserAppId", "ModelId", "Page", "PerPage", "ConceptIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.PostModelVersionsRequest), global::Clarifai.Internal.GRPC.PostModelVersionsRequest.Parser, new[]{ "UserAppId", "ModelId", "ModelVersions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.DeleteModelVersionRequest), global::Clarifai.Internal.GRPC.DeleteModelVersionRequest.Parser, new[]{ "UserAppId", "ModelId", "VersionId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.SingleModelVersionResponse), global::Clarifai.Internal.GRPC.SingleModelVersionResponse.Parser, new[]{ "Status", "ModelVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.MultiModelVersionResponse), global::Clarifai.Internal.GRPC.MultiModelVersionResponse.Parser, new[]{ "Status", "ModelVersions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.LabelCount), global::Clarifai.Internal.GRPC.LabelCount.Parser, new[]{ "ConceptName", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.LabelDistribution), global::Clarifai.Internal.GRPC.LabelDistribution.Parser, new[]{ "PositiveLabelCounts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.CooccurrenceMatrixEntry), global::Clarifai.Internal.GRPC.CooccurrenceMatrixEntry.Parser, new[]{ "Row", "Col", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.CooccurrenceMatrix), global::Clarifai.Internal.GRPC.CooccurrenceMatrix.Parser, new[]{ "Matrix", "ConceptIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.ConfusionMatrixEntry), global::Clarifai.Internal.GRPC.ConfusionMatrixEntry.Parser, new[]{ "Predicted", "Actual", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.ConfusionMatrix), global::Clarifai.Internal.GRPC.ConfusionMatrix.Parser, new[]{ "Matrix", "ConceptIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.ROC), global::Clarifai.Internal.GRPC.ROC.Parser, new[]{ "Fpr", "Tpr", "Thresholds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.PrecisionRecallCurve), global::Clarifai.Internal.GRPC.PrecisionRecallCurve.Parser, new[]{ "Recall", "Precision", "Thresholds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.BinaryMetrics), global::Clarifai.Internal.GRPC.BinaryMetrics.Parser, new[]{ "NumPos", "NumNeg", "NumTot", "RocAuc", "F1", "Concept", "RocCurve", "PrecisionRecallCurve" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.EvalTestSetEntry), global::Clarifai.Internal.GRPC.EvalTestSetEntry.Parser, new[]{ "Id", "Url", "PredictedConcepts", "GroundTruthConcepts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.MetricsSummary), global::Clarifai.Internal.GRPC.MetricsSummary.Parser, new[]{ "Top1Accuracy", "Top5Accuracy", "MacroAvgRocAuc", "MacroStdRocAuc", "MacroAvgF1Score", "MacroStdF1Score", "MacroAvgPrecision", "MacroAvgRecall" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.EvalMetrics), global::Clarifai.Internal.GRPC.EvalMetrics.Parser, new[]{ "Status", "Summary", "ConfusionMatrix", "CooccurrenceMatrix", "LabelCounts", "BinaryMetrics", "TestSet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest), global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest.Parser, new[]{ "UserAppId", "ModelId", "VersionId", "Fields" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest.Types.FieldsValue), global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest.Types.FieldsValue.Parser, new[]{ "ConfusionMatrix", "CooccurrenceMatrix", "LabelCounts", "BinaryMetrics", "TestSet" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.PostModelVersionMetricsRequest), global::Clarifai.Internal.GRPC.PostModelVersionMetricsRequest.Parser, new[]{ "UserAppId", "ModelId", "VersionId", "MaxExamples" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ModelVersion : pb::IMessage<ModelVersion> {
    private static readonly pb::MessageParser<ModelVersion> _parser = new pb::MessageParser<ModelVersion>(() => new ModelVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModelVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersion(ModelVersion other) : this() {
      id_ = other.id_;
      CreatedAt = other.createdAt_ != null ? other.CreatedAt.Clone() : null;
      Status = other.status_ != null ? other.Status.Clone() : null;
      activeConceptCount_ = other.activeConceptCount_;
      Metrics = other.metrics_ != null ? other.Metrics.Clone() : null;
      totalInputCount_ = other.totalInputCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModelVersion Clone() {
      return new ModelVersion(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Clarifai.Internal.GRPC.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "active_concept_count" field.</summary>
    public const int ActiveConceptCountFieldNumber = 4;
    private uint activeConceptCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveConceptCount {
      get { return activeConceptCount_; }
      set {
        activeConceptCount_ = value;
      }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 5;
    private global::Clarifai.Internal.GRPC.EvalMetrics metrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.EvalMetrics Metrics {
      get { return metrics_; }
      set {
        metrics_ = value;
      }
    }

    /// <summary>Field number for the "total_input_count" field.</summary>
    public const int TotalInputCountFieldNumber = 6;
    private uint totalInputCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalInputCount {
      get { return totalInputCount_; }
      set {
        totalInputCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModelVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModelVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(Status, other.Status)) return false;
      if (ActiveConceptCount != other.ActiveConceptCount) return false;
      if (!object.Equals(Metrics, other.Metrics)) return false;
      if (TotalInputCount != other.TotalInputCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (status_ != null) hash ^= Status.GetHashCode();
      if (ActiveConceptCount != 0) hash ^= ActiveConceptCount.GetHashCode();
      if (metrics_ != null) hash ^= Metrics.GetHashCode();
      if (TotalInputCount != 0) hash ^= TotalInputCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreatedAt);
      }
      if (status_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Status);
      }
      if (ActiveConceptCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ActiveConceptCount);
      }
      if (metrics_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Metrics);
      }
      if (TotalInputCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TotalInputCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (ActiveConceptCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveConceptCount);
      }
      if (metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metrics);
      }
      if (TotalInputCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalInputCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModelVersion other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          createdAt_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Clarifai.Internal.GRPC.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.ActiveConceptCount != 0) {
        ActiveConceptCount = other.ActiveConceptCount;
      }
      if (other.metrics_ != null) {
        if (metrics_ == null) {
          metrics_ = new global::Clarifai.Internal.GRPC.EvalMetrics();
        }
        Metrics.MergeFrom(other.Metrics);
      }
      if (other.TotalInputCount != 0) {
        TotalInputCount = other.TotalInputCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (createdAt_ == null) {
              createdAt_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(createdAt_);
            break;
          }
          case 26: {
            if (status_ == null) {
              status_ = new global::Clarifai.Internal.GRPC.Status.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 32: {
            ActiveConceptCount = input.ReadUInt32();
            break;
          }
          case 42: {
            if (metrics_ == null) {
              metrics_ = new global::Clarifai.Internal.GRPC.EvalMetrics();
            }
            input.ReadMessage(metrics_);
            break;
          }
          case 48: {
            TotalInputCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PretrainedModelConfig : pb::IMessage<PretrainedModelConfig> {
    private static readonly pb::MessageParser<PretrainedModelConfig> _parser = new pb::MessageParser<PretrainedModelConfig>(() => new PretrainedModelConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PretrainedModelConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PretrainedModelConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PretrainedModelConfig(PretrainedModelConfig other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PretrainedModelConfig Clone() {
      return new PretrainedModelConfig(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PretrainedModelConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PretrainedModelConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PretrainedModelConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetModelVersionRequest : pb::IMessage<GetModelVersionRequest> {
    private static readonly pb::MessageParser<GetModelVersionRequest> _parser = new pb::MessageParser<GetModelVersionRequest>(() => new GetModelVersionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetModelVersionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelVersionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelVersionRequest(GetModelVersionRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      modelId_ = other.modelId_;
      versionId_ = other.versionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelVersionRequest Clone() {
      return new GetModelVersionRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private string modelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 3;
    private string versionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetModelVersionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetModelVersionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ModelId != other.ModelId) return false;
      if (VersionId != other.VersionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VersionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetModelVersionRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ModelId = input.ReadString();
            break;
          }
          case 26: {
            VersionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListModelVersionsRequest : pb::IMessage<ListModelVersionsRequest> {
    private static readonly pb::MessageParser<ListModelVersionsRequest> _parser = new pb::MessageParser<ListModelVersionsRequest>(() => new ListModelVersionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListModelVersionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelVersionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelVersionsRequest(ListModelVersionsRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      modelId_ = other.modelId_;
      page_ = other.page_;
      perPage_ = other.perPage_;
      conceptIds_ = other.conceptIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListModelVersionsRequest Clone() {
      return new ListModelVersionsRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private string modelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "per_page" field.</summary>
    public const int PerPageFieldNumber = 4;
    private uint perPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PerPage {
      get { return perPage_; }
      set {
        perPage_ = value;
      }
    }

    /// <summary>Field number for the "concept_ids" field.</summary>
    public const int ConceptIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_conceptIds_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> conceptIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConceptIds {
      get { return conceptIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListModelVersionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListModelVersionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ModelId != other.ModelId) return false;
      if (Page != other.Page) return false;
      if (PerPage != other.PerPage) return false;
      if(!conceptIds_.Equals(other.conceptIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (PerPage != 0) hash ^= PerPage.GetHashCode();
      hash ^= conceptIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelId);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (PerPage != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PerPage);
      }
      conceptIds_.WriteTo(output, _repeated_conceptIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (PerPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PerPage);
      }
      size += conceptIds_.CalculateSize(_repeated_conceptIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListModelVersionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.PerPage != 0) {
        PerPage = other.PerPage;
      }
      conceptIds_.Add(other.conceptIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ModelId = input.ReadString();
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 32: {
            PerPage = input.ReadUInt32();
            break;
          }
          case 42: {
            conceptIds_.AddEntriesFrom(input, _repeated_conceptIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PostModelVersionsRequest : pb::IMessage<PostModelVersionsRequest> {
    private static readonly pb::MessageParser<PostModelVersionsRequest> _parser = new pb::MessageParser<PostModelVersionsRequest>(() => new PostModelVersionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostModelVersionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostModelVersionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostModelVersionsRequest(PostModelVersionsRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      modelId_ = other.modelId_;
      modelVersions_ = other.modelVersions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostModelVersionsRequest Clone() {
      return new PostModelVersionsRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private string modelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_versions" field.</summary>
    public const int ModelVersionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.ModelVersion> _repeated_modelVersions_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Internal.GRPC.ModelVersion.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.ModelVersion> modelVersions_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.ModelVersion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.ModelVersion> ModelVersions {
      get { return modelVersions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostModelVersionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostModelVersionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ModelId != other.ModelId) return false;
      if(!modelVersions_.Equals(other.modelVersions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      hash ^= modelVersions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelId);
      }
      modelVersions_.WriteTo(output, _repeated_modelVersions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      size += modelVersions_.CalculateSize(_repeated_modelVersions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostModelVersionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      modelVersions_.Add(other.modelVersions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ModelId = input.ReadString();
            break;
          }
          case 26: {
            modelVersions_.AddEntriesFrom(input, _repeated_modelVersions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteModelVersionRequest : pb::IMessage<DeleteModelVersionRequest> {
    private static readonly pb::MessageParser<DeleteModelVersionRequest> _parser = new pb::MessageParser<DeleteModelVersionRequest>(() => new DeleteModelVersionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteModelVersionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteModelVersionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteModelVersionRequest(DeleteModelVersionRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      modelId_ = other.modelId_;
      versionId_ = other.versionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteModelVersionRequest Clone() {
      return new DeleteModelVersionRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 3;
    private string modelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 4;
    private string versionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteModelVersionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteModelVersionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ModelId != other.ModelId) return false;
      if (VersionId != other.VersionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModelId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VersionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteModelVersionRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 26: {
            ModelId = input.ReadString();
            break;
          }
          case 34: {
            VersionId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleModelVersionResponse : pb::IMessage<SingleModelVersionResponse> {
    private static readonly pb::MessageParser<SingleModelVersionResponse> _parser = new pb::MessageParser<SingleModelVersionResponse>(() => new SingleModelVersionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleModelVersionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleModelVersionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleModelVersionResponse(SingleModelVersionResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      ModelVersion = other.modelVersion_ != null ? other.ModelVersion.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleModelVersionResponse Clone() {
      return new SingleModelVersionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "model_version" field.</summary>
    public const int ModelVersionFieldNumber = 2;
    private global::Clarifai.Internal.GRPC.ModelVersion modelVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.ModelVersion ModelVersion {
      get { return modelVersion_; }
      set {
        modelVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleModelVersionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleModelVersionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(ModelVersion, other.ModelVersion)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (modelVersion_ != null) hash ^= ModelVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (modelVersion_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ModelVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (modelVersion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModelVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleModelVersionResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Clarifai.Internal.GRPC.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.modelVersion_ != null) {
        if (modelVersion_ == null) {
          modelVersion_ = new global::Clarifai.Internal.GRPC.ModelVersion();
        }
        ModelVersion.MergeFrom(other.ModelVersion);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Clarifai.Internal.GRPC.Status.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            if (modelVersion_ == null) {
              modelVersion_ = new global::Clarifai.Internal.GRPC.ModelVersion();
            }
            input.ReadMessage(modelVersion_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiModelVersionResponse : pb::IMessage<MultiModelVersionResponse> {
    private static readonly pb::MessageParser<MultiModelVersionResponse> _parser = new pb::MessageParser<MultiModelVersionResponse>(() => new MultiModelVersionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiModelVersionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiModelVersionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiModelVersionResponse(MultiModelVersionResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      modelVersions_ = other.modelVersions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiModelVersionResponse Clone() {
      return new MultiModelVersionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "model_versions" field.</summary>
    public const int ModelVersionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.ModelVersion> _repeated_modelVersions_codec
        = pb::FieldCodec.ForMessage(18, global::Clarifai.Internal.GRPC.ModelVersion.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.ModelVersion> modelVersions_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.ModelVersion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.ModelVersion> ModelVersions {
      get { return modelVersions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiModelVersionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiModelVersionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!modelVersions_.Equals(other.modelVersions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= modelVersions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      modelVersions_.WriteTo(output, _repeated_modelVersions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += modelVersions_.CalculateSize(_repeated_modelVersions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiModelVersionResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Clarifai.Internal.GRPC.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      modelVersions_.Add(other.modelVersions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Clarifai.Internal.GRPC.Status.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            modelVersions_.AddEntriesFrom(input, _repeated_modelVersions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LabelCount : pb::IMessage<LabelCount> {
    private static readonly pb::MessageParser<LabelCount> _parser = new pb::MessageParser<LabelCount>(() => new LabelCount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelCount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelCount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelCount(LabelCount other) : this() {
      conceptName_ = other.conceptName_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelCount Clone() {
      return new LabelCount(this);
    }

    /// <summary>Field number for the "concept_name" field.</summary>
    public const int ConceptNameFieldNumber = 1;
    private string conceptName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConceptName {
      get { return conceptName_; }
      set {
        conceptName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelCount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelCount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConceptName != other.ConceptName) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConceptName.Length != 0) hash ^= ConceptName.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConceptName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ConceptName);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConceptName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConceptName);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelCount other) {
      if (other == null) {
        return;
      }
      if (other.ConceptName.Length != 0) {
        ConceptName = other.ConceptName;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ConceptName = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LabelDistribution : pb::IMessage<LabelDistribution> {
    private static readonly pb::MessageParser<LabelDistribution> _parser = new pb::MessageParser<LabelDistribution>(() => new LabelDistribution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelDistribution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelDistribution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelDistribution(LabelDistribution other) : this() {
      positiveLabelCounts_ = other.positiveLabelCounts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelDistribution Clone() {
      return new LabelDistribution(this);
    }

    /// <summary>Field number for the "positive_label_counts" field.</summary>
    public const int PositiveLabelCountsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.LabelCount> _repeated_positiveLabelCounts_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Internal.GRPC.LabelCount.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.LabelCount> positiveLabelCounts_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.LabelCount>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.LabelCount> PositiveLabelCounts {
      get { return positiveLabelCounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelDistribution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelDistribution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!positiveLabelCounts_.Equals(other.positiveLabelCounts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= positiveLabelCounts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      positiveLabelCounts_.WriteTo(output, _repeated_positiveLabelCounts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += positiveLabelCounts_.CalculateSize(_repeated_positiveLabelCounts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelDistribution other) {
      if (other == null) {
        return;
      }
      positiveLabelCounts_.Add(other.positiveLabelCounts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            positiveLabelCounts_.AddEntriesFrom(input, _repeated_positiveLabelCounts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CooccurrenceMatrixEntry : pb::IMessage<CooccurrenceMatrixEntry> {
    private static readonly pb::MessageParser<CooccurrenceMatrixEntry> _parser = new pb::MessageParser<CooccurrenceMatrixEntry>(() => new CooccurrenceMatrixEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CooccurrenceMatrixEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrixEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrixEntry(CooccurrenceMatrixEntry other) : this() {
      row_ = other.row_;
      col_ = other.col_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrixEntry Clone() {
      return new CooccurrenceMatrixEntry(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private string row_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Row {
      get { return row_; }
      set {
        row_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private string col_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Col {
      get { return col_; }
      set {
        col_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CooccurrenceMatrixEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CooccurrenceMatrixEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Row.Length != 0) hash ^= Row.GetHashCode();
      if (Col.Length != 0) hash ^= Col.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Row.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Row);
      }
      if (Col.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Col);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Row.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Row);
      }
      if (Col.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CooccurrenceMatrixEntry other) {
      if (other == null) {
        return;
      }
      if (other.Row.Length != 0) {
        Row = other.Row;
      }
      if (other.Col.Length != 0) {
        Col = other.Col;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Row = input.ReadString();
            break;
          }
          case 18: {
            Col = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CooccurrenceMatrix : pb::IMessage<CooccurrenceMatrix> {
    private static readonly pb::MessageParser<CooccurrenceMatrix> _parser = new pb::MessageParser<CooccurrenceMatrix>(() => new CooccurrenceMatrix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CooccurrenceMatrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrix(CooccurrenceMatrix other) : this() {
      matrix_ = other.matrix_.Clone();
      conceptIds_ = other.conceptIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CooccurrenceMatrix Clone() {
      return new CooccurrenceMatrix(this);
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.CooccurrenceMatrixEntry> _repeated_matrix_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Internal.GRPC.CooccurrenceMatrixEntry.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.CooccurrenceMatrixEntry> matrix_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.CooccurrenceMatrixEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.CooccurrenceMatrixEntry> Matrix {
      get { return matrix_; }
    }

    /// <summary>Field number for the "concept_ids" field.</summary>
    public const int ConceptIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_conceptIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> conceptIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConceptIds {
      get { return conceptIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CooccurrenceMatrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CooccurrenceMatrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matrix_.Equals(other.matrix_)) return false;
      if(!conceptIds_.Equals(other.conceptIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matrix_.GetHashCode();
      hash ^= conceptIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matrix_.WriteTo(output, _repeated_matrix_codec);
      conceptIds_.WriteTo(output, _repeated_conceptIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matrix_.CalculateSize(_repeated_matrix_codec);
      size += conceptIds_.CalculateSize(_repeated_conceptIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CooccurrenceMatrix other) {
      if (other == null) {
        return;
      }
      matrix_.Add(other.matrix_);
      conceptIds_.Add(other.conceptIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matrix_.AddEntriesFrom(input, _repeated_matrix_codec);
            break;
          }
          case 18: {
            conceptIds_.AddEntriesFrom(input, _repeated_conceptIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfusionMatrixEntry : pb::IMessage<ConfusionMatrixEntry> {
    private static readonly pb::MessageParser<ConfusionMatrixEntry> _parser = new pb::MessageParser<ConfusionMatrixEntry>(() => new ConfusionMatrixEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfusionMatrixEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrixEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrixEntry(ConfusionMatrixEntry other) : this() {
      predicted_ = other.predicted_;
      actual_ = other.actual_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrixEntry Clone() {
      return new ConfusionMatrixEntry(this);
    }

    /// <summary>Field number for the "predicted" field.</summary>
    public const int PredictedFieldNumber = 1;
    private string predicted_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Predicted {
      get { return predicted_; }
      set {
        predicted_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actual" field.</summary>
    public const int ActualFieldNumber = 2;
    private string actual_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Actual {
      get { return actual_; }
      set {
        actual_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfusionMatrixEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfusionMatrixEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Predicted != other.Predicted) return false;
      if (Actual != other.Actual) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Predicted.Length != 0) hash ^= Predicted.GetHashCode();
      if (Actual.Length != 0) hash ^= Actual.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Predicted.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Predicted);
      }
      if (Actual.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Actual);
      }
      if (Value != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Predicted.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Predicted);
      }
      if (Actual.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Actual);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfusionMatrixEntry other) {
      if (other == null) {
        return;
      }
      if (other.Predicted.Length != 0) {
        Predicted = other.Predicted;
      }
      if (other.Actual.Length != 0) {
        Actual = other.Actual;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Predicted = input.ReadString();
            break;
          }
          case 18: {
            Actual = input.ReadString();
            break;
          }
          case 37: {
            Value = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfusionMatrix : pb::IMessage<ConfusionMatrix> {
    private static readonly pb::MessageParser<ConfusionMatrix> _parser = new pb::MessageParser<ConfusionMatrix>(() => new ConfusionMatrix());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfusionMatrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrix(ConfusionMatrix other) : this() {
      matrix_ = other.matrix_.Clone();
      conceptIds_ = other.conceptIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfusionMatrix Clone() {
      return new ConfusionMatrix(this);
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.ConfusionMatrixEntry> _repeated_matrix_codec
        = pb::FieldCodec.ForMessage(10, global::Clarifai.Internal.GRPC.ConfusionMatrixEntry.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConfusionMatrixEntry> matrix_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConfusionMatrixEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConfusionMatrixEntry> Matrix {
      get { return matrix_; }
    }

    /// <summary>Field number for the "concept_ids" field.</summary>
    public const int ConceptIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_conceptIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> conceptIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ConceptIds {
      get { return conceptIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfusionMatrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfusionMatrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matrix_.Equals(other.matrix_)) return false;
      if(!conceptIds_.Equals(other.conceptIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matrix_.GetHashCode();
      hash ^= conceptIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      matrix_.WriteTo(output, _repeated_matrix_codec);
      conceptIds_.WriteTo(output, _repeated_conceptIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matrix_.CalculateSize(_repeated_matrix_codec);
      size += conceptIds_.CalculateSize(_repeated_conceptIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfusionMatrix other) {
      if (other == null) {
        return;
      }
      matrix_.Add(other.matrix_);
      conceptIds_.Add(other.conceptIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matrix_.AddEntriesFrom(input, _repeated_matrix_codec);
            break;
          }
          case 18: {
            conceptIds_.AddEntriesFrom(input, _repeated_conceptIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ROC : pb::IMessage<ROC> {
    private static readonly pb::MessageParser<ROC> _parser = new pb::MessageParser<ROC>(() => new ROC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ROC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROC(ROC other) : this() {
      fpr_ = other.fpr_.Clone();
      tpr_ = other.tpr_.Clone();
      thresholds_ = other.thresholds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ROC Clone() {
      return new ROC(this);
    }

    /// <summary>Field number for the "fpr" field.</summary>
    public const int FprFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_fpr_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> fpr_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Fpr {
      get { return fpr_; }
    }

    /// <summary>Field number for the "tpr" field.</summary>
    public const int TprFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_tpr_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> tpr_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Tpr {
      get { return tpr_; }
    }

    /// <summary>Field number for the "thresholds" field.</summary>
    public const int ThresholdsFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_thresholds_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> thresholds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Thresholds {
      get { return thresholds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ROC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ROC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fpr_.Equals(other.fpr_)) return false;
      if(!tpr_.Equals(other.tpr_)) return false;
      if(!thresholds_.Equals(other.thresholds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fpr_.GetHashCode();
      hash ^= tpr_.GetHashCode();
      hash ^= thresholds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fpr_.WriteTo(output, _repeated_fpr_codec);
      tpr_.WriteTo(output, _repeated_tpr_codec);
      thresholds_.WriteTo(output, _repeated_thresholds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fpr_.CalculateSize(_repeated_fpr_codec);
      size += tpr_.CalculateSize(_repeated_tpr_codec);
      size += thresholds_.CalculateSize(_repeated_thresholds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ROC other) {
      if (other == null) {
        return;
      }
      fpr_.Add(other.fpr_);
      tpr_.Add(other.tpr_);
      thresholds_.Add(other.thresholds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            fpr_.AddEntriesFrom(input, _repeated_fpr_codec);
            break;
          }
          case 18:
          case 21: {
            tpr_.AddEntriesFrom(input, _repeated_tpr_codec);
            break;
          }
          case 26:
          case 29: {
            thresholds_.AddEntriesFrom(input, _repeated_thresholds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrecisionRecallCurve : pb::IMessage<PrecisionRecallCurve> {
    private static readonly pb::MessageParser<PrecisionRecallCurve> _parser = new pb::MessageParser<PrecisionRecallCurve>(() => new PrecisionRecallCurve());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrecisionRecallCurve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrecisionRecallCurve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrecisionRecallCurve(PrecisionRecallCurve other) : this() {
      recall_ = other.recall_.Clone();
      precision_ = other.precision_.Clone();
      thresholds_ = other.thresholds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrecisionRecallCurve Clone() {
      return new PrecisionRecallCurve(this);
    }

    /// <summary>Field number for the "recall" field.</summary>
    public const int RecallFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_recall_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> recall_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Recall {
      get { return recall_; }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_precision_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> precision_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Precision {
      get { return precision_; }
    }

    /// <summary>Field number for the "thresholds" field.</summary>
    public const int ThresholdsFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_thresholds_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> thresholds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Thresholds {
      get { return thresholds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrecisionRecallCurve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrecisionRecallCurve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recall_.Equals(other.recall_)) return false;
      if(!precision_.Equals(other.precision_)) return false;
      if(!thresholds_.Equals(other.thresholds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recall_.GetHashCode();
      hash ^= precision_.GetHashCode();
      hash ^= thresholds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recall_.WriteTo(output, _repeated_recall_codec);
      precision_.WriteTo(output, _repeated_precision_codec);
      thresholds_.WriteTo(output, _repeated_thresholds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recall_.CalculateSize(_repeated_recall_codec);
      size += precision_.CalculateSize(_repeated_precision_codec);
      size += thresholds_.CalculateSize(_repeated_thresholds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrecisionRecallCurve other) {
      if (other == null) {
        return;
      }
      recall_.Add(other.recall_);
      precision_.Add(other.precision_);
      thresholds_.Add(other.thresholds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            recall_.AddEntriesFrom(input, _repeated_recall_codec);
            break;
          }
          case 18:
          case 21: {
            precision_.AddEntriesFrom(input, _repeated_precision_codec);
            break;
          }
          case 26:
          case 29: {
            thresholds_.AddEntriesFrom(input, _repeated_thresholds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BinaryMetrics : pb::IMessage<BinaryMetrics> {
    private static readonly pb::MessageParser<BinaryMetrics> _parser = new pb::MessageParser<BinaryMetrics>(() => new BinaryMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BinaryMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMetrics(BinaryMetrics other) : this() {
      numPos_ = other.numPos_;
      numNeg_ = other.numNeg_;
      numTot_ = other.numTot_;
      rocAuc_ = other.rocAuc_;
      f1_ = other.f1_;
      Concept = other.concept_ != null ? other.Concept.Clone() : null;
      RocCurve = other.rocCurve_ != null ? other.RocCurve.Clone() : null;
      PrecisionRecallCurve = other.precisionRecallCurve_ != null ? other.PrecisionRecallCurve.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BinaryMetrics Clone() {
      return new BinaryMetrics(this);
    }

    /// <summary>Field number for the "num_pos" field.</summary>
    public const int NumPosFieldNumber = 1;
    private uint numPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPos {
      get { return numPos_; }
      set {
        numPos_ = value;
      }
    }

    /// <summary>Field number for the "num_neg" field.</summary>
    public const int NumNegFieldNumber = 2;
    private uint numNeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumNeg {
      get { return numNeg_; }
      set {
        numNeg_ = value;
      }
    }

    /// <summary>Field number for the "num_tot" field.</summary>
    public const int NumTotFieldNumber = 3;
    private uint numTot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumTot {
      get { return numTot_; }
      set {
        numTot_ = value;
      }
    }

    /// <summary>Field number for the "roc_auc" field.</summary>
    public const int RocAucFieldNumber = 4;
    private float rocAuc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RocAuc {
      get { return rocAuc_; }
      set {
        rocAuc_ = value;
      }
    }

    /// <summary>Field number for the "f1" field.</summary>
    public const int F1FieldNumber = 5;
    private float f1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float F1 {
      get { return f1_; }
      set {
        f1_ = value;
      }
    }

    /// <summary>Field number for the "concept" field.</summary>
    public const int ConceptFieldNumber = 6;
    private global::Clarifai.Internal.GRPC.Concept concept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.Concept Concept {
      get { return concept_; }
      set {
        concept_ = value;
      }
    }

    /// <summary>Field number for the "roc_curve" field.</summary>
    public const int RocCurveFieldNumber = 7;
    private global::Clarifai.Internal.GRPC.ROC rocCurve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.ROC RocCurve {
      get { return rocCurve_; }
      set {
        rocCurve_ = value;
      }
    }

    /// <summary>Field number for the "precision_recall_curve" field.</summary>
    public const int PrecisionRecallCurveFieldNumber = 8;
    private global::Clarifai.Internal.GRPC.PrecisionRecallCurve precisionRecallCurve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.PrecisionRecallCurve PrecisionRecallCurve {
      get { return precisionRecallCurve_; }
      set {
        precisionRecallCurve_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BinaryMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BinaryMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumPos != other.NumPos) return false;
      if (NumNeg != other.NumNeg) return false;
      if (NumTot != other.NumTot) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RocAuc, other.RocAuc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(F1, other.F1)) return false;
      if (!object.Equals(Concept, other.Concept)) return false;
      if (!object.Equals(RocCurve, other.RocCurve)) return false;
      if (!object.Equals(PrecisionRecallCurve, other.PrecisionRecallCurve)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumPos != 0) hash ^= NumPos.GetHashCode();
      if (NumNeg != 0) hash ^= NumNeg.GetHashCode();
      if (NumTot != 0) hash ^= NumTot.GetHashCode();
      if (RocAuc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RocAuc);
      if (F1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(F1);
      if (concept_ != null) hash ^= Concept.GetHashCode();
      if (rocCurve_ != null) hash ^= RocCurve.GetHashCode();
      if (precisionRecallCurve_ != null) hash ^= PrecisionRecallCurve.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumPos != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumPos);
      }
      if (NumNeg != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumNeg);
      }
      if (NumTot != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumTot);
      }
      if (RocAuc != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RocAuc);
      }
      if (F1 != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(F1);
      }
      if (concept_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Concept);
      }
      if (rocCurve_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RocCurve);
      }
      if (precisionRecallCurve_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PrecisionRecallCurve);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPos);
      }
      if (NumNeg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumNeg);
      }
      if (NumTot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumTot);
      }
      if (RocAuc != 0F) {
        size += 1 + 4;
      }
      if (F1 != 0F) {
        size += 1 + 4;
      }
      if (concept_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Concept);
      }
      if (rocCurve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RocCurve);
      }
      if (precisionRecallCurve_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrecisionRecallCurve);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BinaryMetrics other) {
      if (other == null) {
        return;
      }
      if (other.NumPos != 0) {
        NumPos = other.NumPos;
      }
      if (other.NumNeg != 0) {
        NumNeg = other.NumNeg;
      }
      if (other.NumTot != 0) {
        NumTot = other.NumTot;
      }
      if (other.RocAuc != 0F) {
        RocAuc = other.RocAuc;
      }
      if (other.F1 != 0F) {
        F1 = other.F1;
      }
      if (other.concept_ != null) {
        if (concept_ == null) {
          concept_ = new global::Clarifai.Internal.GRPC.Concept();
        }
        Concept.MergeFrom(other.Concept);
      }
      if (other.rocCurve_ != null) {
        if (rocCurve_ == null) {
          rocCurve_ = new global::Clarifai.Internal.GRPC.ROC();
        }
        RocCurve.MergeFrom(other.RocCurve);
      }
      if (other.precisionRecallCurve_ != null) {
        if (precisionRecallCurve_ == null) {
          precisionRecallCurve_ = new global::Clarifai.Internal.GRPC.PrecisionRecallCurve();
        }
        PrecisionRecallCurve.MergeFrom(other.PrecisionRecallCurve);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumPos = input.ReadUInt32();
            break;
          }
          case 16: {
            NumNeg = input.ReadUInt32();
            break;
          }
          case 24: {
            NumTot = input.ReadUInt32();
            break;
          }
          case 37: {
            RocAuc = input.ReadFloat();
            break;
          }
          case 45: {
            F1 = input.ReadFloat();
            break;
          }
          case 50: {
            if (concept_ == null) {
              concept_ = new global::Clarifai.Internal.GRPC.Concept();
            }
            input.ReadMessage(concept_);
            break;
          }
          case 58: {
            if (rocCurve_ == null) {
              rocCurve_ = new global::Clarifai.Internal.GRPC.ROC();
            }
            input.ReadMessage(rocCurve_);
            break;
          }
          case 66: {
            if (precisionRecallCurve_ == null) {
              precisionRecallCurve_ = new global::Clarifai.Internal.GRPC.PrecisionRecallCurve();
            }
            input.ReadMessage(precisionRecallCurve_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EvalTestSetEntry : pb::IMessage<EvalTestSetEntry> {
    private static readonly pb::MessageParser<EvalTestSetEntry> _parser = new pb::MessageParser<EvalTestSetEntry>(() => new EvalTestSetEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvalTestSetEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalTestSetEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalTestSetEntry(EvalTestSetEntry other) : this() {
      id_ = other.id_;
      url_ = other.url_;
      predictedConcepts_ = other.predictedConcepts_.Clone();
      groundTruthConcepts_ = other.groundTruthConcepts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalTestSetEntry Clone() {
      return new EvalTestSetEntry(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "predicted_concepts" field.</summary>
    public const int PredictedConceptsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.Concept> _repeated_predictedConcepts_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Internal.GRPC.Concept.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.Concept> predictedConcepts_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.Concept>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.Concept> PredictedConcepts {
      get { return predictedConcepts_; }
    }

    /// <summary>Field number for the "ground_truth_concepts" field.</summary>
    public const int GroundTruthConceptsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.Concept> _repeated_groundTruthConcepts_codec
        = pb::FieldCodec.ForMessage(34, global::Clarifai.Internal.GRPC.Concept.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.Concept> groundTruthConcepts_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.Concept>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.Concept> GroundTruthConcepts {
      get { return groundTruthConcepts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvalTestSetEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvalTestSetEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Url != other.Url) return false;
      if(!predictedConcepts_.Equals(other.predictedConcepts_)) return false;
      if(!groundTruthConcepts_.Equals(other.groundTruthConcepts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      hash ^= predictedConcepts_.GetHashCode();
      hash ^= groundTruthConcepts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      predictedConcepts_.WriteTo(output, _repeated_predictedConcepts_codec);
      groundTruthConcepts_.WriteTo(output, _repeated_groundTruthConcepts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      size += predictedConcepts_.CalculateSize(_repeated_predictedConcepts_codec);
      size += groundTruthConcepts_.CalculateSize(_repeated_groundTruthConcepts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvalTestSetEntry other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      predictedConcepts_.Add(other.predictedConcepts_);
      groundTruthConcepts_.Add(other.groundTruthConcepts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            predictedConcepts_.AddEntriesFrom(input, _repeated_predictedConcepts_codec);
            break;
          }
          case 34: {
            groundTruthConcepts_.AddEntriesFrom(input, _repeated_groundTruthConcepts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MetricsSummary : pb::IMessage<MetricsSummary> {
    private static readonly pb::MessageParser<MetricsSummary> _parser = new pb::MessageParser<MetricsSummary>(() => new MetricsSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetricsSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsSummary(MetricsSummary other) : this() {
      top1Accuracy_ = other.top1Accuracy_;
      top5Accuracy_ = other.top5Accuracy_;
      macroAvgRocAuc_ = other.macroAvgRocAuc_;
      macroStdRocAuc_ = other.macroStdRocAuc_;
      macroAvgF1Score_ = other.macroAvgF1Score_;
      macroStdF1Score_ = other.macroStdF1Score_;
      macroAvgPrecision_ = other.macroAvgPrecision_;
      macroAvgRecall_ = other.macroAvgRecall_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetricsSummary Clone() {
      return new MetricsSummary(this);
    }

    /// <summary>Field number for the "top1_accuracy" field.</summary>
    public const int Top1AccuracyFieldNumber = 1;
    private float top1Accuracy_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Top1Accuracy {
      get { return top1Accuracy_; }
      set {
        top1Accuracy_ = value;
      }
    }

    /// <summary>Field number for the "top5_accuracy" field.</summary>
    public const int Top5AccuracyFieldNumber = 2;
    private float top5Accuracy_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Top5Accuracy {
      get { return top5Accuracy_; }
      set {
        top5Accuracy_ = value;
      }
    }

    /// <summary>Field number for the "macro_avg_roc_auc" field.</summary>
    public const int MacroAvgRocAucFieldNumber = 3;
    private float macroAvgRocAuc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroAvgRocAuc {
      get { return macroAvgRocAuc_; }
      set {
        macroAvgRocAuc_ = value;
      }
    }

    /// <summary>Field number for the "macro_std_roc_auc" field.</summary>
    public const int MacroStdRocAucFieldNumber = 4;
    private float macroStdRocAuc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroStdRocAuc {
      get { return macroStdRocAuc_; }
      set {
        macroStdRocAuc_ = value;
      }
    }

    /// <summary>Field number for the "macro_avg_f1_score" field.</summary>
    public const int MacroAvgF1ScoreFieldNumber = 5;
    private float macroAvgF1Score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroAvgF1Score {
      get { return macroAvgF1Score_; }
      set {
        macroAvgF1Score_ = value;
      }
    }

    /// <summary>Field number for the "macro_std_f1_score" field.</summary>
    public const int MacroStdF1ScoreFieldNumber = 6;
    private float macroStdF1Score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroStdF1Score {
      get { return macroStdF1Score_; }
      set {
        macroStdF1Score_ = value;
      }
    }

    /// <summary>Field number for the "macro_avg_precision" field.</summary>
    public const int MacroAvgPrecisionFieldNumber = 7;
    private float macroAvgPrecision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroAvgPrecision {
      get { return macroAvgPrecision_; }
      set {
        macroAvgPrecision_ = value;
      }
    }

    /// <summary>Field number for the "macro_avg_recall" field.</summary>
    public const int MacroAvgRecallFieldNumber = 8;
    private float macroAvgRecall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MacroAvgRecall {
      get { return macroAvgRecall_; }
      set {
        macroAvgRecall_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetricsSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetricsSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Top1Accuracy, other.Top1Accuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Top5Accuracy, other.Top5Accuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroAvgRocAuc, other.MacroAvgRocAuc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroStdRocAuc, other.MacroStdRocAuc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroAvgF1Score, other.MacroAvgF1Score)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroStdF1Score, other.MacroStdF1Score)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroAvgPrecision, other.MacroAvgPrecision)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MacroAvgRecall, other.MacroAvgRecall)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Top1Accuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Top1Accuracy);
      if (Top5Accuracy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Top5Accuracy);
      if (MacroAvgRocAuc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroAvgRocAuc);
      if (MacroStdRocAuc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroStdRocAuc);
      if (MacroAvgF1Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroAvgF1Score);
      if (MacroStdF1Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroStdF1Score);
      if (MacroAvgPrecision != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroAvgPrecision);
      if (MacroAvgRecall != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MacroAvgRecall);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Top1Accuracy != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Top1Accuracy);
      }
      if (Top5Accuracy != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Top5Accuracy);
      }
      if (MacroAvgRocAuc != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MacroAvgRocAuc);
      }
      if (MacroStdRocAuc != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MacroStdRocAuc);
      }
      if (MacroAvgF1Score != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(MacroAvgF1Score);
      }
      if (MacroStdF1Score != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MacroStdF1Score);
      }
      if (MacroAvgPrecision != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MacroAvgPrecision);
      }
      if (MacroAvgRecall != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MacroAvgRecall);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Top1Accuracy != 0F) {
        size += 1 + 4;
      }
      if (Top5Accuracy != 0F) {
        size += 1 + 4;
      }
      if (MacroAvgRocAuc != 0F) {
        size += 1 + 4;
      }
      if (MacroStdRocAuc != 0F) {
        size += 1 + 4;
      }
      if (MacroAvgF1Score != 0F) {
        size += 1 + 4;
      }
      if (MacroStdF1Score != 0F) {
        size += 1 + 4;
      }
      if (MacroAvgPrecision != 0F) {
        size += 1 + 4;
      }
      if (MacroAvgRecall != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetricsSummary other) {
      if (other == null) {
        return;
      }
      if (other.Top1Accuracy != 0F) {
        Top1Accuracy = other.Top1Accuracy;
      }
      if (other.Top5Accuracy != 0F) {
        Top5Accuracy = other.Top5Accuracy;
      }
      if (other.MacroAvgRocAuc != 0F) {
        MacroAvgRocAuc = other.MacroAvgRocAuc;
      }
      if (other.MacroStdRocAuc != 0F) {
        MacroStdRocAuc = other.MacroStdRocAuc;
      }
      if (other.MacroAvgF1Score != 0F) {
        MacroAvgF1Score = other.MacroAvgF1Score;
      }
      if (other.MacroStdF1Score != 0F) {
        MacroStdF1Score = other.MacroStdF1Score;
      }
      if (other.MacroAvgPrecision != 0F) {
        MacroAvgPrecision = other.MacroAvgPrecision;
      }
      if (other.MacroAvgRecall != 0F) {
        MacroAvgRecall = other.MacroAvgRecall;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Top1Accuracy = input.ReadFloat();
            break;
          }
          case 21: {
            Top5Accuracy = input.ReadFloat();
            break;
          }
          case 29: {
            MacroAvgRocAuc = input.ReadFloat();
            break;
          }
          case 37: {
            MacroStdRocAuc = input.ReadFloat();
            break;
          }
          case 45: {
            MacroAvgF1Score = input.ReadFloat();
            break;
          }
          case 53: {
            MacroStdF1Score = input.ReadFloat();
            break;
          }
          case 61: {
            MacroAvgPrecision = input.ReadFloat();
            break;
          }
          case 69: {
            MacroAvgRecall = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EvalMetrics : pb::IMessage<EvalMetrics> {
    private static readonly pb::MessageParser<EvalMetrics> _parser = new pb::MessageParser<EvalMetrics>(() => new EvalMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EvalMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalMetrics(EvalMetrics other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      Summary = other.summary_ != null ? other.Summary.Clone() : null;
      ConfusionMatrix = other.confusionMatrix_ != null ? other.ConfusionMatrix.Clone() : null;
      CooccurrenceMatrix = other.cooccurrenceMatrix_ != null ? other.CooccurrenceMatrix.Clone() : null;
      LabelCounts = other.labelCounts_ != null ? other.LabelCounts.Clone() : null;
      binaryMetrics_ = other.binaryMetrics_.Clone();
      testSet_ = other.testSet_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EvalMetrics Clone() {
      return new EvalMetrics(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 2;
    private global::Clarifai.Internal.GRPC.MetricsSummary summary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.MetricsSummary Summary {
      get { return summary_; }
      set {
        summary_ = value;
      }
    }

    /// <summary>Field number for the "confusion_matrix" field.</summary>
    public const int ConfusionMatrixFieldNumber = 3;
    private global::Clarifai.Internal.GRPC.ConfusionMatrix confusionMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.ConfusionMatrix ConfusionMatrix {
      get { return confusionMatrix_; }
      set {
        confusionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "cooccurrence_matrix" field.</summary>
    public const int CooccurrenceMatrixFieldNumber = 4;
    private global::Clarifai.Internal.GRPC.CooccurrenceMatrix cooccurrenceMatrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.CooccurrenceMatrix CooccurrenceMatrix {
      get { return cooccurrenceMatrix_; }
      set {
        cooccurrenceMatrix_ = value;
      }
    }

    /// <summary>Field number for the "label_counts" field.</summary>
    public const int LabelCountsFieldNumber = 5;
    private global::Clarifai.Internal.GRPC.LabelDistribution labelCounts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.LabelDistribution LabelCounts {
      get { return labelCounts_; }
      set {
        labelCounts_ = value;
      }
    }

    /// <summary>Field number for the "binary_metrics" field.</summary>
    public const int BinaryMetricsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.BinaryMetrics> _repeated_binaryMetrics_codec
        = pb::FieldCodec.ForMessage(50, global::Clarifai.Internal.GRPC.BinaryMetrics.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.BinaryMetrics> binaryMetrics_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.BinaryMetrics>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.BinaryMetrics> BinaryMetrics {
      get { return binaryMetrics_; }
    }

    /// <summary>Field number for the "test_set" field.</summary>
    public const int TestSetFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.EvalTestSetEntry> _repeated_testSet_codec
        = pb::FieldCodec.ForMessage(58, global::Clarifai.Internal.GRPC.EvalTestSetEntry.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.EvalTestSetEntry> testSet_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.EvalTestSetEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.EvalTestSetEntry> TestSet {
      get { return testSet_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EvalMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EvalMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Summary, other.Summary)) return false;
      if (!object.Equals(ConfusionMatrix, other.ConfusionMatrix)) return false;
      if (!object.Equals(CooccurrenceMatrix, other.CooccurrenceMatrix)) return false;
      if (!object.Equals(LabelCounts, other.LabelCounts)) return false;
      if(!binaryMetrics_.Equals(other.binaryMetrics_)) return false;
      if(!testSet_.Equals(other.testSet_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (summary_ != null) hash ^= Summary.GetHashCode();
      if (confusionMatrix_ != null) hash ^= ConfusionMatrix.GetHashCode();
      if (cooccurrenceMatrix_ != null) hash ^= CooccurrenceMatrix.GetHashCode();
      if (labelCounts_ != null) hash ^= LabelCounts.GetHashCode();
      hash ^= binaryMetrics_.GetHashCode();
      hash ^= testSet_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (summary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Summary);
      }
      if (confusionMatrix_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConfusionMatrix);
      }
      if (cooccurrenceMatrix_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CooccurrenceMatrix);
      }
      if (labelCounts_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LabelCounts);
      }
      binaryMetrics_.WriteTo(output, _repeated_binaryMetrics_codec);
      testSet_.WriteTo(output, _repeated_testSet_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (summary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Summary);
      }
      if (confusionMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfusionMatrix);
      }
      if (cooccurrenceMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CooccurrenceMatrix);
      }
      if (labelCounts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LabelCounts);
      }
      size += binaryMetrics_.CalculateSize(_repeated_binaryMetrics_codec);
      size += testSet_.CalculateSize(_repeated_testSet_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EvalMetrics other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Clarifai.Internal.GRPC.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.summary_ != null) {
        if (summary_ == null) {
          summary_ = new global::Clarifai.Internal.GRPC.MetricsSummary();
        }
        Summary.MergeFrom(other.Summary);
      }
      if (other.confusionMatrix_ != null) {
        if (confusionMatrix_ == null) {
          confusionMatrix_ = new global::Clarifai.Internal.GRPC.ConfusionMatrix();
        }
        ConfusionMatrix.MergeFrom(other.ConfusionMatrix);
      }
      if (other.cooccurrenceMatrix_ != null) {
        if (cooccurrenceMatrix_ == null) {
          cooccurrenceMatrix_ = new global::Clarifai.Internal.GRPC.CooccurrenceMatrix();
        }
        CooccurrenceMatrix.MergeFrom(other.CooccurrenceMatrix);
      }
      if (other.labelCounts_ != null) {
        if (labelCounts_ == null) {
          labelCounts_ = new global::Clarifai.Internal.GRPC.LabelDistribution();
        }
        LabelCounts.MergeFrom(other.LabelCounts);
      }
      binaryMetrics_.Add(other.binaryMetrics_);
      testSet_.Add(other.testSet_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Clarifai.Internal.GRPC.Status.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            if (summary_ == null) {
              summary_ = new global::Clarifai.Internal.GRPC.MetricsSummary();
            }
            input.ReadMessage(summary_);
            break;
          }
          case 26: {
            if (confusionMatrix_ == null) {
              confusionMatrix_ = new global::Clarifai.Internal.GRPC.ConfusionMatrix();
            }
            input.ReadMessage(confusionMatrix_);
            break;
          }
          case 34: {
            if (cooccurrenceMatrix_ == null) {
              cooccurrenceMatrix_ = new global::Clarifai.Internal.GRPC.CooccurrenceMatrix();
            }
            input.ReadMessage(cooccurrenceMatrix_);
            break;
          }
          case 42: {
            if (labelCounts_ == null) {
              labelCounts_ = new global::Clarifai.Internal.GRPC.LabelDistribution();
            }
            input.ReadMessage(labelCounts_);
            break;
          }
          case 50: {
            binaryMetrics_.AddEntriesFrom(input, _repeated_binaryMetrics_codec);
            break;
          }
          case 58: {
            testSet_.AddEntriesFrom(input, _repeated_testSet_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetModelVersionMetricsRequest : pb::IMessage<GetModelVersionMetricsRequest> {
    private static readonly pb::MessageParser<GetModelVersionMetricsRequest> _parser = new pb::MessageParser<GetModelVersionMetricsRequest>(() => new GetModelVersionMetricsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetModelVersionMetricsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelVersionMetricsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelVersionMetricsRequest(GetModelVersionMetricsRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      modelId_ = other.modelId_;
      versionId_ = other.versionId_;
      Fields = other.fields_ != null ? other.Fields.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetModelVersionMetricsRequest Clone() {
      return new GetModelVersionMetricsRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private string modelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 3;
    private string versionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 4;
    private global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest.Types.FieldsValue fields_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest.Types.FieldsValue Fields {
      get { return fields_; }
      set {
        fields_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetModelVersionMetricsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetModelVersionMetricsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ModelId != other.ModelId) return false;
      if (VersionId != other.VersionId) return false;
      if (!object.Equals(Fields, other.Fields)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (fields_ != null) hash ^= Fields.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VersionId);
      }
      if (fields_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Fields);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (fields_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fields);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetModelVersionMetricsRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.fields_ != null) {
        if (fields_ == null) {
          fields_ = new global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest.Types.FieldsValue();
        }
        Fields.MergeFrom(other.Fields);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ModelId = input.ReadString();
            break;
          }
          case 26: {
            VersionId = input.ReadString();
            break;
          }
          case 34: {
            if (fields_ == null) {
              fields_ = new global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest.Types.FieldsValue();
            }
            input.ReadMessage(fields_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetModelVersionMetricsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class FieldsValue : pb::IMessage<FieldsValue> {
        private static readonly pb::MessageParser<FieldsValue> _parser = new pb::MessageParser<FieldsValue>(() => new FieldsValue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FieldsValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Clarifai.Internal.GRPC.GetModelVersionMetricsRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldsValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldsValue(FieldsValue other) : this() {
          confusionMatrix_ = other.confusionMatrix_;
          cooccurrenceMatrix_ = other.cooccurrenceMatrix_;
          labelCounts_ = other.labelCounts_;
          binaryMetrics_ = other.binaryMetrics_;
          testSet_ = other.testSet_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FieldsValue Clone() {
          return new FieldsValue(this);
        }

        /// <summary>Field number for the "confusion_matrix" field.</summary>
        public const int ConfusionMatrixFieldNumber = 1;
        private bool confusionMatrix_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ConfusionMatrix {
          get { return confusionMatrix_; }
          set {
            confusionMatrix_ = value;
          }
        }

        /// <summary>Field number for the "cooccurrence_matrix" field.</summary>
        public const int CooccurrenceMatrixFieldNumber = 2;
        private bool cooccurrenceMatrix_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool CooccurrenceMatrix {
          get { return cooccurrenceMatrix_; }
          set {
            cooccurrenceMatrix_ = value;
          }
        }

        /// <summary>Field number for the "label_counts" field.</summary>
        public const int LabelCountsFieldNumber = 3;
        private bool labelCounts_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool LabelCounts {
          get { return labelCounts_; }
          set {
            labelCounts_ = value;
          }
        }

        /// <summary>Field number for the "binary_metrics" field.</summary>
        public const int BinaryMetricsFieldNumber = 4;
        private bool binaryMetrics_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool BinaryMetrics {
          get { return binaryMetrics_; }
          set {
            binaryMetrics_ = value;
          }
        }

        /// <summary>Field number for the "test_set" field.</summary>
        public const int TestSetFieldNumber = 5;
        private bool testSet_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool TestSet {
          get { return testSet_; }
          set {
            testSet_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FieldsValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FieldsValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ConfusionMatrix != other.ConfusionMatrix) return false;
          if (CooccurrenceMatrix != other.CooccurrenceMatrix) return false;
          if (LabelCounts != other.LabelCounts) return false;
          if (BinaryMetrics != other.BinaryMetrics) return false;
          if (TestSet != other.TestSet) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ConfusionMatrix != false) hash ^= ConfusionMatrix.GetHashCode();
          if (CooccurrenceMatrix != false) hash ^= CooccurrenceMatrix.GetHashCode();
          if (LabelCounts != false) hash ^= LabelCounts.GetHashCode();
          if (BinaryMetrics != false) hash ^= BinaryMetrics.GetHashCode();
          if (TestSet != false) hash ^= TestSet.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ConfusionMatrix != false) {
            output.WriteRawTag(8);
            output.WriteBool(ConfusionMatrix);
          }
          if (CooccurrenceMatrix != false) {
            output.WriteRawTag(16);
            output.WriteBool(CooccurrenceMatrix);
          }
          if (LabelCounts != false) {
            output.WriteRawTag(24);
            output.WriteBool(LabelCounts);
          }
          if (BinaryMetrics != false) {
            output.WriteRawTag(32);
            output.WriteBool(BinaryMetrics);
          }
          if (TestSet != false) {
            output.WriteRawTag(40);
            output.WriteBool(TestSet);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ConfusionMatrix != false) {
            size += 1 + 1;
          }
          if (CooccurrenceMatrix != false) {
            size += 1 + 1;
          }
          if (LabelCounts != false) {
            size += 1 + 1;
          }
          if (BinaryMetrics != false) {
            size += 1 + 1;
          }
          if (TestSet != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FieldsValue other) {
          if (other == null) {
            return;
          }
          if (other.ConfusionMatrix != false) {
            ConfusionMatrix = other.ConfusionMatrix;
          }
          if (other.CooccurrenceMatrix != false) {
            CooccurrenceMatrix = other.CooccurrenceMatrix;
          }
          if (other.LabelCounts != false) {
            LabelCounts = other.LabelCounts;
          }
          if (other.BinaryMetrics != false) {
            BinaryMetrics = other.BinaryMetrics;
          }
          if (other.TestSet != false) {
            TestSet = other.TestSet;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                ConfusionMatrix = input.ReadBool();
                break;
              }
              case 16: {
                CooccurrenceMatrix = input.ReadBool();
                break;
              }
              case 24: {
                LabelCounts = input.ReadBool();
                break;
              }
              case 32: {
                BinaryMetrics = input.ReadBool();
                break;
              }
              case 40: {
                TestSet = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class PostModelVersionMetricsRequest : pb::IMessage<PostModelVersionMetricsRequest> {
    private static readonly pb::MessageParser<PostModelVersionMetricsRequest> _parser = new pb::MessageParser<PostModelVersionMetricsRequest>(() => new PostModelVersionMetricsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostModelVersionMetricsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ModelVersionReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostModelVersionMetricsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostModelVersionMetricsRequest(PostModelVersionMetricsRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      modelId_ = other.modelId_;
      versionId_ = other.versionId_;
      maxExamples_ = other.maxExamples_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostModelVersionMetricsRequest Clone() {
      return new PostModelVersionMetricsRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "model_id" field.</summary>
    public const int ModelIdFieldNumber = 2;
    private string modelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelId {
      get { return modelId_; }
      set {
        modelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 3;
    private string versionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_examples" field.</summary>
    public const int MaxExamplesFieldNumber = 4;
    private uint maxExamples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxExamples {
      get { return maxExamples_; }
      set {
        maxExamples_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostModelVersionMetricsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostModelVersionMetricsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ModelId != other.ModelId) return false;
      if (VersionId != other.VersionId) return false;
      if (MaxExamples != other.MaxExamples) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ModelId.Length != 0) hash ^= ModelId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (MaxExamples != 0) hash ^= MaxExamples.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ModelId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VersionId);
      }
      if (MaxExamples != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxExamples);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ModelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (MaxExamples != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxExamples);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostModelVersionMetricsRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ModelId.Length != 0) {
        ModelId = other.ModelId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.MaxExamples != 0) {
        MaxExamples = other.MaxExamples;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ModelId = input.ReadString();
            break;
          }
          case 26: {
            VersionId = input.ReadString();
            break;
          }
          case 32: {
            MaxExamples = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
