// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/clarifai/api/concept_language.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Clarifai.Internal.GRPC {

  /// <summary>Holder for reflection information generated from proto/clarifai/api/concept_language.proto</summary>
  public static partial class ConceptLanguageReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/clarifai/api/concept_language.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConceptLanguageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cilwcm90by9jbGFyaWZhaS9hcGkvY29uY2VwdF9sYW5ndWFnZS5wcm90bxIM",
            "Y2xhcmlmYWkuYXBpGh9wcm90by9jbGFyaWZhaS9hcGkvY29tbW9uLnByb3Rv",
            "GiZwcm90by9jbGFyaWZhaS9hcGkvc3RhdHVzL3N0YXR1cy5wcm90bxopcHJv",
            "dG8vY2xhcmlmYWkvYXBpL3V0aWxzL2V4dGVuc2lvbnMucHJvdG8iPwoPQ29u",
            "Y2VwdExhbmd1YWdlEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSEgoKZGVm",
            "aW5pdGlvbhgDIAEoCSJyChlHZXRDb25jZXB0TGFuZ3VhZ2VSZXF1ZXN0Ei8K",
            "C3VzZXJfYXBwX2lkGAEgASgLMhouY2xhcmlmYWkuYXBpLlVzZXJBcHBJRFNl",
            "dBISCgpjb25jZXB0X2lkGAIgASgJEhAKCGxhbmd1YWdlGAMgASgJIoIBChtM",
            "aXN0Q29uY2VwdExhbmd1YWdlc1JlcXVlc3QSLwoLdXNlcl9hcHBfaWQYASAB",
            "KAsyGi5jbGFyaWZhaS5hcGkuVXNlckFwcElEU2V0EhIKCmNvbmNlcHRfaWQY",
            "AiABKAkSDAoEcGFnZRgDIAEoDRIQCghwZXJfcGFnZRgEIAEoDSKtAQocUGF0",
            "Y2hDb25jZXB0TGFuZ3VhZ2VzUmVxdWVzdBIvCgt1c2VyX2FwcF9pZBgBIAEo",
            "CzIaLmNsYXJpZmFpLmFwaS5Vc2VyQXBwSURTZXQSEgoKY29uY2VwdF9pZBgC",
            "IAEoCRI4ChFjb25jZXB0X2xhbmd1YWdlcxgDIAMoCzIdLmNsYXJpZmFpLmFw",
            "aS5Db25jZXB0TGFuZ3VhZ2USDgoGYWN0aW9uGAQgASgJIpwBChtQb3N0Q29u",
            "Y2VwdExhbmd1YWdlc1JlcXVlc3QSLwoLdXNlcl9hcHBfaWQYASABKAsyGi5j",
            "bGFyaWZhaS5hcGkuVXNlckFwcElEU2V0EhIKCmNvbmNlcHRfaWQYAiABKAkS",
            "OAoRY29uY2VwdF9sYW5ndWFnZXMYAyADKAsyHS5jbGFyaWZhaS5hcGkuQ29u",
            "Y2VwdExhbmd1YWdlIoUBCh1TaW5nbGVDb25jZXB0TGFuZ3VhZ2VSZXNwb25z",
            "ZRIrCgZzdGF0dXMYASABKAsyGy5jbGFyaWZhaS5hcGkuc3RhdHVzLlN0YXR1",
            "cxI3ChBjb25jZXB0X2xhbmd1YWdlGAIgASgLMh0uY2xhcmlmYWkuYXBpLkNv",
            "bmNlcHRMYW5ndWFnZSKLAQocTXVsdGlDb25jZXB0TGFuZ3VhZ2VSZXNwb25z",
            "ZRIrCgZzdGF0dXMYASABKAsyGy5jbGFyaWZhaS5hcGkuc3RhdHVzLlN0YXR1",
            "cxI+ChFjb25jZXB0X2xhbmd1YWdlcxgCIAMoCzIdLmNsYXJpZmFpLmFwaS5D",
            "b25jZXB0TGFuZ3VhZ2VCBIC1GAFCWgobY2xhcmlmYWkyLmludGVybmFsLmdy",
            "cGMuYXBpWgNhcGmiAgRDQUlQqgIWQ2xhcmlmYWkuSW50ZXJuYWwuR1JQQ8IC",
            "AV/KAhFDbGFyaWZhaVxJbnRlcm5hbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Clarifai.Internal.GRPC.CommonReflection.Descriptor, global::Clarifai.Internal.GRPC.Status.StatusReflection.Descriptor, global::Clarifai.Internal.GRPC.Utils.ExtensionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.ConceptLanguage), global::Clarifai.Internal.GRPC.ConceptLanguage.Parser, new[]{ "Id", "Name", "Definition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.GetConceptLanguageRequest), global::Clarifai.Internal.GRPC.GetConceptLanguageRequest.Parser, new[]{ "UserAppId", "ConceptId", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.ListConceptLanguagesRequest), global::Clarifai.Internal.GRPC.ListConceptLanguagesRequest.Parser, new[]{ "UserAppId", "ConceptId", "Page", "PerPage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.PatchConceptLanguagesRequest), global::Clarifai.Internal.GRPC.PatchConceptLanguagesRequest.Parser, new[]{ "UserAppId", "ConceptId", "ConceptLanguages", "Action" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.PostConceptLanguagesRequest), global::Clarifai.Internal.GRPC.PostConceptLanguagesRequest.Parser, new[]{ "UserAppId", "ConceptId", "ConceptLanguages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.SingleConceptLanguageResponse), global::Clarifai.Internal.GRPC.SingleConceptLanguageResponse.Parser, new[]{ "Status", "ConceptLanguage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Clarifai.Internal.GRPC.MultiConceptLanguageResponse), global::Clarifai.Internal.GRPC.MultiConceptLanguageResponse.Parser, new[]{ "Status", "ConceptLanguages" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ConceptLanguage : pb::IMessage<ConceptLanguage> {
    private static readonly pb::MessageParser<ConceptLanguage> _parser = new pb::MessageParser<ConceptLanguage>(() => new ConceptLanguage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConceptLanguage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ConceptLanguageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptLanguage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptLanguage(ConceptLanguage other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      definition_ = other.definition_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConceptLanguage Clone() {
      return new ConceptLanguage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "definition" field.</summary>
    public const int DefinitionFieldNumber = 3;
    private string definition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Definition {
      get { return definition_; }
      set {
        definition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConceptLanguage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConceptLanguage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Definition != other.Definition) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Definition.Length != 0) hash ^= Definition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Definition.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Definition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Definition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Definition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConceptLanguage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Definition.Length != 0) {
        Definition = other.Definition;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Definition = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetConceptLanguageRequest : pb::IMessage<GetConceptLanguageRequest> {
    private static readonly pb::MessageParser<GetConceptLanguageRequest> _parser = new pb::MessageParser<GetConceptLanguageRequest>(() => new GetConceptLanguageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetConceptLanguageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ConceptLanguageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConceptLanguageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConceptLanguageRequest(GetConceptLanguageRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      conceptId_ = other.conceptId_;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConceptLanguageRequest Clone() {
      return new GetConceptLanguageRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "concept_id" field.</summary>
    public const int ConceptIdFieldNumber = 2;
    private string conceptId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConceptId {
      get { return conceptId_; }
      set {
        conceptId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetConceptLanguageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetConceptLanguageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ConceptId != other.ConceptId) return false;
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ConceptId.Length != 0) hash ^= ConceptId.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ConceptId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConceptId);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ConceptId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConceptId);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetConceptLanguageRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ConceptId.Length != 0) {
        ConceptId = other.ConceptId;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ConceptId = input.ReadString();
            break;
          }
          case 26: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListConceptLanguagesRequest : pb::IMessage<ListConceptLanguagesRequest> {
    private static readonly pb::MessageParser<ListConceptLanguagesRequest> _parser = new pb::MessageParser<ListConceptLanguagesRequest>(() => new ListConceptLanguagesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListConceptLanguagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ConceptLanguageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListConceptLanguagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListConceptLanguagesRequest(ListConceptLanguagesRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      conceptId_ = other.conceptId_;
      page_ = other.page_;
      perPage_ = other.perPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListConceptLanguagesRequest Clone() {
      return new ListConceptLanguagesRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "concept_id" field.</summary>
    public const int ConceptIdFieldNumber = 2;
    private string conceptId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConceptId {
      get { return conceptId_; }
      set {
        conceptId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 3;
    private uint page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "per_page" field.</summary>
    public const int PerPageFieldNumber = 4;
    private uint perPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PerPage {
      get { return perPage_; }
      set {
        perPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListConceptLanguagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListConceptLanguagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ConceptId != other.ConceptId) return false;
      if (Page != other.Page) return false;
      if (PerPage != other.PerPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ConceptId.Length != 0) hash ^= ConceptId.GetHashCode();
      if (Page != 0) hash ^= Page.GetHashCode();
      if (PerPage != 0) hash ^= PerPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ConceptId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConceptId);
      }
      if (Page != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Page);
      }
      if (PerPage != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PerPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ConceptId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConceptId);
      }
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Page);
      }
      if (PerPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PerPage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListConceptLanguagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ConceptId.Length != 0) {
        ConceptId = other.ConceptId;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.PerPage != 0) {
        PerPage = other.PerPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ConceptId = input.ReadString();
            break;
          }
          case 24: {
            Page = input.ReadUInt32();
            break;
          }
          case 32: {
            PerPage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PatchConceptLanguagesRequest : pb::IMessage<PatchConceptLanguagesRequest> {
    private static readonly pb::MessageParser<PatchConceptLanguagesRequest> _parser = new pb::MessageParser<PatchConceptLanguagesRequest>(() => new PatchConceptLanguagesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PatchConceptLanguagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ConceptLanguageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchConceptLanguagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchConceptLanguagesRequest(PatchConceptLanguagesRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      conceptId_ = other.conceptId_;
      conceptLanguages_ = other.conceptLanguages_.Clone();
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PatchConceptLanguagesRequest Clone() {
      return new PatchConceptLanguagesRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "concept_id" field.</summary>
    public const int ConceptIdFieldNumber = 2;
    private string conceptId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConceptId {
      get { return conceptId_; }
      set {
        conceptId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "concept_languages" field.</summary>
    public const int ConceptLanguagesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.ConceptLanguage> _repeated_conceptLanguages_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Internal.GRPC.ConceptLanguage.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage> conceptLanguages_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage> ConceptLanguages {
      get { return conceptLanguages_; }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private string action_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PatchConceptLanguagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PatchConceptLanguagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ConceptId != other.ConceptId) return false;
      if(!conceptLanguages_.Equals(other.conceptLanguages_)) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ConceptId.Length != 0) hash ^= ConceptId.GetHashCode();
      hash ^= conceptLanguages_.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ConceptId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConceptId);
      }
      conceptLanguages_.WriteTo(output, _repeated_conceptLanguages_codec);
      if (Action.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ConceptId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConceptId);
      }
      size += conceptLanguages_.CalculateSize(_repeated_conceptLanguages_codec);
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PatchConceptLanguagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ConceptId.Length != 0) {
        ConceptId = other.ConceptId;
      }
      conceptLanguages_.Add(other.conceptLanguages_);
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ConceptId = input.ReadString();
            break;
          }
          case 26: {
            conceptLanguages_.AddEntriesFrom(input, _repeated_conceptLanguages_codec);
            break;
          }
          case 34: {
            Action = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PostConceptLanguagesRequest : pb::IMessage<PostConceptLanguagesRequest> {
    private static readonly pb::MessageParser<PostConceptLanguagesRequest> _parser = new pb::MessageParser<PostConceptLanguagesRequest>(() => new PostConceptLanguagesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostConceptLanguagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ConceptLanguageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostConceptLanguagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostConceptLanguagesRequest(PostConceptLanguagesRequest other) : this() {
      UserAppId = other.userAppId_ != null ? other.UserAppId.Clone() : null;
      conceptId_ = other.conceptId_;
      conceptLanguages_ = other.conceptLanguages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostConceptLanguagesRequest Clone() {
      return new PostConceptLanguagesRequest(this);
    }

    /// <summary>Field number for the "user_app_id" field.</summary>
    public const int UserAppIdFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.UserAppIDSet userAppId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.UserAppIDSet UserAppId {
      get { return userAppId_; }
      set {
        userAppId_ = value;
      }
    }

    /// <summary>Field number for the "concept_id" field.</summary>
    public const int ConceptIdFieldNumber = 2;
    private string conceptId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConceptId {
      get { return conceptId_; }
      set {
        conceptId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "concept_languages" field.</summary>
    public const int ConceptLanguagesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.ConceptLanguage> _repeated_conceptLanguages_codec
        = pb::FieldCodec.ForMessage(26, global::Clarifai.Internal.GRPC.ConceptLanguage.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage> conceptLanguages_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage> ConceptLanguages {
      get { return conceptLanguages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostConceptLanguagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostConceptLanguagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UserAppId, other.UserAppId)) return false;
      if (ConceptId != other.ConceptId) return false;
      if(!conceptLanguages_.Equals(other.conceptLanguages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (userAppId_ != null) hash ^= UserAppId.GetHashCode();
      if (ConceptId.Length != 0) hash ^= ConceptId.GetHashCode();
      hash ^= conceptLanguages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (userAppId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UserAppId);
      }
      if (ConceptId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConceptId);
      }
      conceptLanguages_.WriteTo(output, _repeated_conceptLanguages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (userAppId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserAppId);
      }
      if (ConceptId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConceptId);
      }
      size += conceptLanguages_.CalculateSize(_repeated_conceptLanguages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostConceptLanguagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.userAppId_ != null) {
        if (userAppId_ == null) {
          userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
        }
        UserAppId.MergeFrom(other.UserAppId);
      }
      if (other.ConceptId.Length != 0) {
        ConceptId = other.ConceptId;
      }
      conceptLanguages_.Add(other.conceptLanguages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (userAppId_ == null) {
              userAppId_ = new global::Clarifai.Internal.GRPC.UserAppIDSet();
            }
            input.ReadMessage(userAppId_);
            break;
          }
          case 18: {
            ConceptId = input.ReadString();
            break;
          }
          case 26: {
            conceptLanguages_.AddEntriesFrom(input, _repeated_conceptLanguages_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SingleConceptLanguageResponse : pb::IMessage<SingleConceptLanguageResponse> {
    private static readonly pb::MessageParser<SingleConceptLanguageResponse> _parser = new pb::MessageParser<SingleConceptLanguageResponse>(() => new SingleConceptLanguageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SingleConceptLanguageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ConceptLanguageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleConceptLanguageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleConceptLanguageResponse(SingleConceptLanguageResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      ConceptLanguage = other.conceptLanguage_ != null ? other.ConceptLanguage.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SingleConceptLanguageResponse Clone() {
      return new SingleConceptLanguageResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "concept_language" field.</summary>
    public const int ConceptLanguageFieldNumber = 2;
    private global::Clarifai.Internal.GRPC.ConceptLanguage conceptLanguage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.ConceptLanguage ConceptLanguage {
      get { return conceptLanguage_; }
      set {
        conceptLanguage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SingleConceptLanguageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SingleConceptLanguageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(ConceptLanguage, other.ConceptLanguage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (conceptLanguage_ != null) hash ^= ConceptLanguage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (conceptLanguage_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConceptLanguage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (conceptLanguage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConceptLanguage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SingleConceptLanguageResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Clarifai.Internal.GRPC.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.conceptLanguage_ != null) {
        if (conceptLanguage_ == null) {
          conceptLanguage_ = new global::Clarifai.Internal.GRPC.ConceptLanguage();
        }
        ConceptLanguage.MergeFrom(other.ConceptLanguage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Clarifai.Internal.GRPC.Status.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            if (conceptLanguage_ == null) {
              conceptLanguage_ = new global::Clarifai.Internal.GRPC.ConceptLanguage();
            }
            input.ReadMessage(conceptLanguage_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiConceptLanguageResponse : pb::IMessage<MultiConceptLanguageResponse> {
    private static readonly pb::MessageParser<MultiConceptLanguageResponse> _parser = new pb::MessageParser<MultiConceptLanguageResponse>(() => new MultiConceptLanguageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiConceptLanguageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Clarifai.Internal.GRPC.ConceptLanguageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiConceptLanguageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiConceptLanguageResponse(MultiConceptLanguageResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      conceptLanguages_ = other.conceptLanguages_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiConceptLanguageResponse Clone() {
      return new MultiConceptLanguageResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Clarifai.Internal.GRPC.Status.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Clarifai.Internal.GRPC.Status.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "concept_languages" field.</summary>
    public const int ConceptLanguagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Clarifai.Internal.GRPC.ConceptLanguage> _repeated_conceptLanguages_codec
        = pb::FieldCodec.ForMessage(18, global::Clarifai.Internal.GRPC.ConceptLanguage.Parser);
    private readonly pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage> conceptLanguages_ = new pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Clarifai.Internal.GRPC.ConceptLanguage> ConceptLanguages {
      get { return conceptLanguages_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiConceptLanguageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiConceptLanguageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!conceptLanguages_.Equals(other.conceptLanguages_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= conceptLanguages_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      conceptLanguages_.WriteTo(output, _repeated_conceptLanguages_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += conceptLanguages_.CalculateSize(_repeated_conceptLanguages_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiConceptLanguageResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Clarifai.Internal.GRPC.Status.Status();
        }
        Status.MergeFrom(other.Status);
      }
      conceptLanguages_.Add(other.conceptLanguages_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Clarifai.Internal.GRPC.Status.Status();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            conceptLanguages_.AddEntriesFrom(input, _repeated_conceptLanguages_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
