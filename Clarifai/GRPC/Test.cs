// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/clarifai/utils/jsonpb/test.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jsonpb {

  /// <summary>Holder for reflection information generated from proto/clarifai/utils/jsonpb/test.proto</summary>
  public static partial class TestReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/clarifai/utils/jsonpb/test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZwcm90by9jbGFyaWZhaS91dGlscy9qc29ucGIvdGVzdC5wcm90bxIGanNv",
            "bnBiIn8KFEJvb2xGbG9hdFRlc3RNZXNzYWdlEg8KB3VpbnRfMzIYBCABKA0S",
            "DwoHdWludF82NBgFIAEoBBIOCgZpbnRfMzIYBiABKAUSDgoGaW50XzY0GAcg",
            "ASgDEgwKBGZfMzIYCCABKAISDAoEZl82NBgJIAEoARIJCgFiGAogASgIYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jsonpb.BoolFloatTestMessage), global::Jsonpb.BoolFloatTestMessage.Parser, new[]{ "Uint32", "Uint64", "Int32", "Int64", "F32", "F64", "B" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BoolFloatTestMessage : pb::IMessage<BoolFloatTestMessage> {
    private static readonly pb::MessageParser<BoolFloatTestMessage> _parser = new pb::MessageParser<BoolFloatTestMessage>(() => new BoolFloatTestMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoolFloatTestMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jsonpb.TestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolFloatTestMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolFloatTestMessage(BoolFloatTestMessage other) : this() {
      uint32_ = other.uint32_;
      uint64_ = other.uint64_;
      int32_ = other.int32_;
      int64_ = other.int64_;
      f32_ = other.f32_;
      f64_ = other.f64_;
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolFloatTestMessage Clone() {
      return new BoolFloatTestMessage(this);
    }

    /// <summary>Field number for the "uint_32" field.</summary>
    public const int Uint32FieldNumber = 4;
    private uint uint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Uint32 {
      get { return uint32_; }
      set {
        uint32_ = value;
      }
    }

    /// <summary>Field number for the "uint_64" field.</summary>
    public const int Uint64FieldNumber = 5;
    private ulong uint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uint64 {
      get { return uint64_; }
      set {
        uint64_ = value;
      }
    }

    /// <summary>Field number for the "int_32" field.</summary>
    public const int Int32FieldNumber = 6;
    private int int32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Int32 {
      get { return int32_; }
      set {
        int32_ = value;
      }
    }

    /// <summary>Field number for the "int_64" field.</summary>
    public const int Int64FieldNumber = 7;
    private long int64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64 {
      get { return int64_; }
      set {
        int64_ = value;
      }
    }

    /// <summary>Field number for the "f_32" field.</summary>
    public const int F32FieldNumber = 8;
    private float f32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float F32 {
      get { return f32_; }
      set {
        f32_ = value;
      }
    }

    /// <summary>Field number for the "f_64" field.</summary>
    public const int F64FieldNumber = 9;
    private double f64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double F64 {
      get { return f64_; }
      set {
        f64_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 10;
    private bool b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoolFloatTestMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoolFloatTestMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uint32 != other.Uint32) return false;
      if (Uint64 != other.Uint64) return false;
      if (Int32 != other.Int32) return false;
      if (Int64 != other.Int64) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(F32, other.F32)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(F64, other.F64)) return false;
      if (B != other.B) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uint32 != 0) hash ^= Uint32.GetHashCode();
      if (Uint64 != 0UL) hash ^= Uint64.GetHashCode();
      if (Int32 != 0) hash ^= Int32.GetHashCode();
      if (Int64 != 0L) hash ^= Int64.GetHashCode();
      if (F32 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(F32);
      if (F64 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(F64);
      if (B != false) hash ^= B.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uint32 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Uint32);
      }
      if (Uint64 != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Uint64);
      }
      if (Int32 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Int32);
      }
      if (Int64 != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Int64);
      }
      if (F32 != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(F32);
      }
      if (F64 != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(F64);
      }
      if (B != false) {
        output.WriteRawTag(80);
        output.WriteBool(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uint32);
      }
      if (Uint64 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uint64);
      }
      if (Int32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Int32);
      }
      if (Int64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Int64);
      }
      if (F32 != 0F) {
        size += 1 + 4;
      }
      if (F64 != 0D) {
        size += 1 + 8;
      }
      if (B != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoolFloatTestMessage other) {
      if (other == null) {
        return;
      }
      if (other.Uint32 != 0) {
        Uint32 = other.Uint32;
      }
      if (other.Uint64 != 0UL) {
        Uint64 = other.Uint64;
      }
      if (other.Int32 != 0) {
        Int32 = other.Int32;
      }
      if (other.Int64 != 0L) {
        Int64 = other.Int64;
      }
      if (other.F32 != 0F) {
        F32 = other.F32;
      }
      if (other.F64 != 0D) {
        F64 = other.F64;
      }
      if (other.B != false) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 32: {
            Uint32 = input.ReadUInt32();
            break;
          }
          case 40: {
            Uint64 = input.ReadUInt64();
            break;
          }
          case 48: {
            Int32 = input.ReadInt32();
            break;
          }
          case 56: {
            Int64 = input.ReadInt64();
            break;
          }
          case 69: {
            F32 = input.ReadFloat();
            break;
          }
          case 73: {
            F64 = input.ReadDouble();
            break;
          }
          case 80: {
            B = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
